// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getLawsLawsGet,
  getLawLawsLawIdGet,
  getParagraphsVersionsVersionIdParagraphsGet,
  getDiffDiffLeftVersionIdRightVersionIdGet,
  startWorkImportPost,
} from "../sdk.gen";
import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/vue-query";
import type {
  GetLawsLawsGetData,
  GetLawLawsLawIdGetData,
  GetParagraphsVersionsVersionIdParagraphsGetData,
  GetParagraphsVersionsVersionIdParagraphsGetError,
  GetParagraphsVersionsVersionIdParagraphsGetResponse,
  GetDiffDiffLeftVersionIdRightVersionIdGetData,
  StartWorkImportPostData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getLawsLawsGetQueryKey = (options?: Options<GetLawsLawsGetData>) =>
  createQueryKey("getLawsLawsGet", options);

/**
 * Get Laws
 */
export const getLawsLawsGetOptions = (options?: Options<GetLawsLawsGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLawsLawsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLawsLawsGetQueryKey(options),
  });
};

export const getLawLawsLawIdGetQueryKey = (options: Options<GetLawLawsLawIdGetData>) =>
  createQueryKey("getLawLawsLawIdGet", options);

/**
 * Get Law
 */
export const getLawLawsLawIdGetOptions = (options: Options<GetLawLawsLawIdGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLawLawsLawIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLawLawsLawIdGetQueryKey(options),
  });
};

export const getParagraphsVersionsVersionIdParagraphsGetQueryKey = (
  options: Options<GetParagraphsVersionsVersionIdParagraphsGetData>,
) => createQueryKey("getParagraphsVersionsVersionIdParagraphsGet", options);

/**
 * Get Paragraphs
 */
export const getParagraphsVersionsVersionIdParagraphsGetOptions = (
  options: Options<GetParagraphsVersionsVersionIdParagraphsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getParagraphsVersionsVersionIdParagraphsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getParagraphsVersionsVersionIdParagraphsGetQueryKey(options),
  });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = {
    ...queryKey[0],
  };
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getParagraphsVersionsVersionIdParagraphsGetInfiniteQueryKey = (
  options: Options<GetParagraphsVersionsVersionIdParagraphsGetData>,
): QueryKey<Options<GetParagraphsVersionsVersionIdParagraphsGetData>> =>
  createQueryKey("getParagraphsVersionsVersionIdParagraphsGet", options, true);

/**
 * Get Paragraphs
 */
export const getParagraphsVersionsVersionIdParagraphsGetInfiniteOptions = (
  options: Options<GetParagraphsVersionsVersionIdParagraphsGetData>,
) => {
  return infiniteQueryOptions<
    GetParagraphsVersionsVersionIdParagraphsGetResponse,
    GetParagraphsVersionsVersionIdParagraphsGetError,
    InfiniteData<GetParagraphsVersionsVersionIdParagraphsGetResponse>,
    QueryKey<Options<GetParagraphsVersionsVersionIdParagraphsGetData>>,
    | number
    | Pick<QueryKey<Options<GetParagraphsVersionsVersionIdParagraphsGetData>>[0], "body" | "headers" | "path" | "query">
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetParagraphsVersionsVersionIdParagraphsGetData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getParagraphsVersionsVersionIdParagraphsGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getParagraphsVersionsVersionIdParagraphsGetInfiniteQueryKey(options),
    },
  );
};

export const getDiffDiffLeftVersionIdRightVersionIdGetQueryKey = (
  options: Options<GetDiffDiffLeftVersionIdRightVersionIdGetData>,
) => createQueryKey("getDiffDiffLeftVersionIdRightVersionIdGet", options);

/**
 * Get Diff
 */
export const getDiffDiffLeftVersionIdRightVersionIdGetOptions = (
  options: Options<GetDiffDiffLeftVersionIdRightVersionIdGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDiffDiffLeftVersionIdRightVersionIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDiffDiffLeftVersionIdRightVersionIdGetQueryKey(options),
  });
};

export const startWorkImportPostQueryKey = (options?: Options<StartWorkImportPostData>) =>
  createQueryKey("startWorkImportPost", options);

/**
 * Start Work
 */
export const startWorkImportPostOptions = (options?: Options<StartWorkImportPostData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await startWorkImportPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: startWorkImportPostQueryKey(options),
  });
};

/**
 * Start Work
 */
export const startWorkImportPostMutation = (
  options?: Partial<Options<StartWorkImportPostData>>,
): UseMutationOptions<unknown, DefaultError, Options<StartWorkImportPostData>> => {
  const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<StartWorkImportPostData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await startWorkImportPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
